// build sparse table function
int sparse[N][28];

void buildST(int arr[],int n){
    // base case 
    rep(i,0,n) sparse[i][0]=arr[i];
    
    for(int j=1;(1<<j)<=n;j++){
        for(int i=0;i+(1<<j)<=n;i++){
            sparse[i][j]=gcd(sparse[i][j-1],sparse[i+(1<<(j-1))][j-1]);
        }
    }
}

int query(int l,int r){
    int j=(int)log2(r-l+1);
    
    int ans=gcd(sparse[l][j],sparse[r-(1<<j)+1][j]);
    return ans;
}

// query(l,r) is l is lower index, r is upper index -> 0 based

void solve() {
    int n;
    cin>>n;
    
    int arr[n];
    rep(i,0,n) cin>>arr[i];
    
    buildST(arr,n);
    
    cout<<query(0,5)<<"\n";
    cout<<query(2,7)<<"\n";
    cout<<query(2,4)<<"\n";
    cout<<query(5,6)<<"\n";
    
	return;
}