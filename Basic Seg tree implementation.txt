#include <bits/stdc++.h>
using namespace std;

const int N=100;

int seg[4*N];


// tl, tr -> node range , id-> index of point to update, val-> new update value, curr-> my curr position node or ROOT node
void update(int curr,int tl,int tr,int id,int val){
    if(tl==id && tr==id){
        seg[curr]=val;
        return;
    }
    
    if(id<tl || id>tr){  // outside of range
        return ;
    }
    
    // if it is inside
    int tm=(tl+tr)/2; // call update for left and right subtree

    update(2*curr,tl,tm,id,val);
    update(2*curr+1,tm+1,tr,id,val);
    
    // my operation
    seg[curr]=seg[curr*2+1]+seg[curr*2]; // update ancestor nodes
    return;
}

int query(int root,int tl,int tr,int l,int r){
    // no overlap
    if(tl>r || tr<l) return 0;
    
    //my current range is fully within the actual query range
    if(l<=tl && tr<=r){  //  l...tl....tr...r
        return seg[root];
    }
    
    // partial overlap
    int tm=(tl+tr)/2; // call query for left and right subtree
    int a1=query(root*2,tl,tm,l,r);
    int a2=query(root*2+1,tm+1,tr,l,r);
    
    return a1+a2; // return operation
}

int main() {
    // curr=1, start=1, end=N, follow 1 based indexing
	update(1,1,N,3,7);
	update(1,1,N,4,1);
	update(1,1,N,5,6);
	update(1,1,N,6,4);
	update(1,1,N,7,7);
	update(1,1,N,8,2);
	update(1,1,N,9,7);
	for(int i=0;i<10;i++) cout<<seg[i]<<" ";
	cout<<"\n";
	cout<<query(1,1,N-1,1,4)<<"\n";
	cout<<query(1,1,N-1,3,6)<<"\n";
	cout<<query(1,1,N-1,5,8)<<"\n";
	cout<<query(1,1,N-1,8,9)<<"\n";
	
	
	return 0;
}



    
    