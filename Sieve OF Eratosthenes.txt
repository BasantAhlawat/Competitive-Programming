
#include <bits/stdc++.h>

using namespace std;


// run this below code for best result

vector<int> pr;

void sieve(int n){
    int lp[n+1];
    rep(i,0,n+1) lp[i]=0;
    for (int i=2; i<=n; ++i) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr.push_back (i);
        }
        for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=n; ++j)
            lp[i * pr[j]] = pr[j];
    }

}


int main()
{
   sieve(100000);
   for(auto i:pr) cout<<i<<" ";
   cout<<pr.size()<<"\n";
   return 0;
}



/// Store prime factors till 1000000 in a vector
// cross check for validity
vvll fact(N);
ll pr[N];

void sieve(){
    memset(pr,-1,sizeof(pr));
    rep(i,2,N){
        if(pr[i]==-1){
            fact[i].pb(i);
            for(ll j=2*i;j<N;j+=i){
                pr[j]=1;
                fact[j].pb(i);
                
            }
        }
        
    }
}





---------------------------


vector<int> prime;

void SieveOfEratosthenes(int n)
{
    bool temp[n + 1];
    memset(temp, true, sizeof(temp));
 
    for (int p = 2; p * p <= n; p++)
    {
        if (temp[p] == true) 
        {
            for (int i = p * p; i <= n; i += p)
                temp[i] = false;
        }
    }
    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (temp[p])
            prime.pb(p);
}



